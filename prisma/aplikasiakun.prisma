generator client {
  provider = "prisma-client-js"
  output   = "AplikasiAkun"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_APLIKASI_AKUN")
}

model apps {
  id              String      @id @db.Char(36)
  urut            Int?
  nama            String      @db.VarChar(50)
  img             String?     @db.VarChar(80)
  keterangan      String?     @db.LongText
  url             String?     @db.Text
  isLocal         Boolean     @default(true)
  isAkun          Boolean     @default(false)
  isMaintenace    Boolean     @default(false)
  isActive        Boolean     @default(true)
  storage_folder  String?     @db.VarChar(30)
  updatedBy       String?     @db.Char(36)
  created_at      DateTime?   @db.Timestamp(0)
  updated_at      DateTime?   @db.Timestamp(0)
  deleted_at      DateTime?   @db.Timestamp(0)
  users           users?      @relation(fields: [updatedBy], references: [id], map: "apps_updatedby_foreign")
  filturs         filturs[]
  roles           roles[]
  other_user_apps user_apps[] @relation("user_appsTouser_apps")

  @@index([updatedBy], map: "apps_updatedby_foreign")
}

model filturs {
  id           String         @id @db.Char(36)
  urut         Int?
  nama         String         @db.VarChar(50)
  img          String?        @db.VarChar(80)
  keterangan   String?        @db.LongText
  url          String?        @db.Text
  app_id       String         @db.Char(36)
  updatedBy    String?        @db.Char(36)
  created_at   DateTime?      @db.Timestamp(0)
  updated_at   DateTime?      @db.Timestamp(0)
  deleted_at   DateTime?      @db.Timestamp(0)
  apps         apps           @relation(fields: [app_id], references: [id], onDelete: Cascade, map: "filturs_app_id_foreign")
  users        users?         @relation(fields: [updatedBy], references: [id], map: "filturs_updatedby_foreign")
  user_filturs user_filturs[]

  @@index([app_id], map: "filturs_app_id_foreign")
  @@index([updatedBy], map: "filturs_updatedby_foreign")
}

model roles {
  id         String       @id @db.Char(36)
  urut       Int?
  nama       String       @db.VarChar(50)
  img        String?      @db.VarChar(80)
  keterangan String?      @db.LongText
  url        String?      @db.Text
  app_id     String       @db.Char(36)
  updatedBy  String?      @db.Char(36)
  created_at DateTime?    @db.Timestamp(0)
  updated_at DateTime?    @db.Timestamp(0)
  deleted_at DateTime?    @db.Timestamp(0)
  apps       apps         @relation(fields: [app_id], references: [id], onDelete: Cascade, map: "roles_app_id_foreign")
  users      users?       @relation(fields: [updatedBy], references: [id], map: "roles_updatedby_foreign")
  user_roles user_roles[]

  @@index([app_id], map: "roles_app_id_foreign")
  @@index([updatedBy], map: "roles_updatedby_foreign")
}

model user_apps {
  id                               String         @id @db.Char(36)
  user_id                          String         @db.Char(36)
  app_id                           String         @db.Char(36)
  updatedBy                        String?        @db.Char(36)
  created_at                       DateTime?      @db.Timestamp(0)
  updated_at                       DateTime?      @db.Timestamp(0)
  users_user_apps_user_idTousers   users          @relation("user_apps_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, map: "user_apps_user_id_foreign")
  apps                             apps           @relation("user_appsTouser_apps", fields: [app_id], references: [id], onDelete: Cascade, map: "user_apps_app_id_foreign")
  users_user_apps_updatedByTousers users?         @relation("user_apps_updatedByTousers", fields: [updatedBy], references: [id], onUpdate: SetNull, map: "user_apps_updatedby_foreign")
  user_filturs                     user_filturs[]
  user_roles                       user_roles[]

  @@index([app_id], map: "app_id")
  @@index([updatedBy], map: "updatedBy")
  @@index([user_id], map: "user_id")
}

model user_filturs {
  id          String    @id @db.Char(36)
  urut        Int?
  user_app_id String    @db.Char(36)
  filtur_id   String    @db.Char(36)
  updatedBy   String?   @db.Char(36)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  filturs     filturs   @relation(fields: [filtur_id], references: [id], onDelete: Cascade, map: "user_filturs_filtur_id_foreign")
  users       users?    @relation(fields: [updatedBy], references: [id], map: "user_filturs_updatedby_foreign")
  user_apps   user_apps @relation(fields: [user_app_id], references: [id], onDelete: Cascade, map: "user_filturs_user_app_id_foreign")

  @@index([filtur_id], map: "user_filturs_filtur_id_foreign")
  @@index([updatedBy], map: "user_filturs_updatedby_foreign")
  @@index([user_app_id], map: "user_filturs_user_app_id_foreign")
}

model user_roles {
  id          String    @id @db.Char(36)
  urut        Int?
  user_app_id String    @db.Char(36)
  role_id     String    @db.Char(36)
  updatedBy   String?   @db.Char(36)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  roles       roles     @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "user_roles_role_id_foreign")
  users       users?    @relation(fields: [updatedBy], references: [id], map: "user_roles_updatedby_foreign")
  user_apps   user_apps @relation(fields: [user_app_id], references: [id], onDelete: Cascade, map: "user_roles_user_app_id_foreign")

  @@index([role_id], map: "user_roles_role_id_foreign")
  @@index([updatedBy], map: "user_roles_updatedby_foreign")
  @@index([user_app_id], map: "user_roles_user_app_id_foreign")
}

model users {
  id                                   String         @id @db.Char(36)
  google_id                            String?        @db.VarChar(25)
  avatar                               String?        @db.VarChar(100)
  nama                                 String         @db.VarChar(50)
  username                             String         @unique(map: "users_username_unique") @db.VarChar(20)
  email                                String?        @unique(map: "users_email_unique") @db.VarChar(255)
  phone                                String?        @unique(map: "users_phone_unique") @db.VarChar(16)
  email_verified_at                    DateTime?      @db.Timestamp(0)
  password                             String         @db.VarChar(65)
  isActive                             Boolean        @default(true)
  code                                 String?        @db.VarChar(65)
  codeExpiredAt                        DateTime?      @db.Timestamp(0)
  codeResendAt                         DateTime?      @db.Timestamp(0)
  lastSeenAt                           DateTime?      @db.Timestamp(0)
  token                                String?        @db.Text
  tokenRefresh                         String?        @db.Text
  created_at                           DateTime?      @db.Timestamp(0)
  updated_at                           DateTime?      @db.Timestamp(0)
  apps                                 apps[]
  filturs                              filturs[]
  roles                                roles[]
  user_apps_user_apps_user_idTousers   user_apps[]    @relation("user_apps_user_idTousers")
  user_apps_user_apps_updatedByTousers user_apps[]    @relation("user_apps_updatedByTousers")
  user_filturs                         user_filturs[]
  user_roles                           user_roles[]
}
